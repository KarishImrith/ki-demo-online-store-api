using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using OnlineStore.Database.Entities;

namespace OnlineStore.Database;

public class DataDbContext : IdentityDbContext<User, Role, long>
{
    public DataDbContext(DbContextOptions<DataDbContext> options)
        : base(options)
    {
    }

    // Disable synchronous SaveChanges as we want to enforce asynchronous only usage
    public override int SaveChanges()
        => throw new NotImplementedException();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.ApplyConfigurationsFromAssembly(typeof(DataDbContext).Assembly);

        // Configure entities generated by identity
        modelBuilder.Entity<IdentityRoleClaim<long>>().ToTable("RoleClaim");
        modelBuilder.Entity<IdentityUserClaim<long>>().ToTable("UserClaim");
        modelBuilder.Entity<IdentityUserLogin<long>>().ToTable("UserLogin");
        modelBuilder.Entity<IdentityUserRole<long>>().ToTable("UserRole");
        modelBuilder.Entity<IdentityUserToken<long>>().ToTable("UserToken");
    }
}

public class DataTestDbContext : DataDbContext
{
    public DataTestDbContext(DbContextOptions<DataDbContext> options)
        : base(options)
    {
    }

    // Disable synchronous SaveChanges as we want to enforce asynchronous only usage
    public override int SaveChanges()
        => throw new NotImplementedException();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(DataDbContext).Assembly);

        base.OnModelCreating(modelBuilder);
    }
}
